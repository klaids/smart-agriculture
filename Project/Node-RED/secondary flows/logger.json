[
    {
        "id": "5fb85cb408e14e98",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2527e29609ca8a96",
        "type": "comment",
        "z": "5fb85cb408e14e98",
        "name": "Auto Logger archiving",
        "info": "Generate file name that are to be archived.\n\nIdea is that this generates a list of file names for let's say between current day-5 days to current day-10 days, so all files that are 5-10 days old will get archived. And this can be executed daily or weekly, and the interval allows some overlap (e.g. the program fails, Node-Red was down, etc.)\n\nInject node should contain a JSON:\n{    \n    \"start\": 20,    \n    \"end\": 10\n}\n\nThis will generate file names D-20 to D-10 days.\nStart should be greather than end!\n",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "53662efd8d5ba8bb",
        "type": "function",
        "z": "5fb85cb408e14e98",
        "name": "Maplin Filename generator",
        "func": "let output = [];\nfor (var i=msg.payload.end;i<msg.payload.start;i++) {\n    \n    // calculate the date\n    let now = new Date();\n    now.setTime(now.getTime() - 1000*60*60*24*i);\n    let yyyy = now.getFullYear();\n    let mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\n    let dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\n    let hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\n    let mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\n    let ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n    \n    let newfile = { \"topic\": \"archive\", \"payload\": \"\"};\n    // Generate out file name pattern\n    newfile.fname = \"maplin_\"+ yyyy + mm + dd + \".csv\";\n    // Full filename with path \n    newfile.filename = \"/home/pi/datalog/\"+ newfile.fname;\n    \n    // Shell script only needs the filename without the path\n    newfile.payload = newfile.fname;\n    output.push(newfile);\n\n}\n\nreturn [output];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 140,
        "wires": [
            [
                "f056d87d4a1a97ba"
            ]
        ]
    },
    {
        "id": "65b81e521152d02c",
        "type": "function",
        "z": "5fb85cb408e14e98",
        "name": "Weather Station Filename generator",
        "func": "let output = [];\nfor (var i=msg.payload.end;i<msg.payload.start;i++) {\n    \n    // calculate the date\n    let now = new Date();\n    now.setTime(now.getTime() - 1000*60*60*24*i);\n    let yyyy = now.getFullYear();\n    let mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\n    let dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\n    let hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\n    let mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\n    let ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n    \n    let newfile = { \"topic\": \"archive\", \"payload\": \"\"};\n    // Generate out file name pattern\n    newfile.fname = \"weather_sensor_\"+ yyyy + mm + dd + \".csv\";\n    // Full filename with path \n    newfile.filename = \"/home/pi/datalog/\"+ newfile.fname;\n    \n    // Shell script only needs the filename without the path\n    newfile.payload = newfile.fname;\n    output.push(newfile);\n\n}\n\nreturn [output];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "f056d87d4a1a97ba"
            ]
        ]
    },
    {
        "id": "ec1b3f51b19a9665",
        "type": "inject",
        "z": "5fb85cb408e14e98",
        "name": "Start",
        "props": [
            {
                "p": "payload",
                "v": "{\"start\":20,\"end\":10}",
                "vt": "json"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "40 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"start\":20,\"end\":10}",
        "payloadType": "json",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "53662efd8d5ba8bb",
                "65b81e521152d02c"
            ]
        ]
    },
    {
        "id": "70c1e7767a7135b9",
        "type": "exec",
        "z": "5fb85cb408e14e98",
        "command": "/home/pi/log_upload.sh",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "File upload",
        "x": 710,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "c2c71df7273b5aff"
            ]
        ]
    },
    {
        "id": "c2c71df7273b5aff",
        "type": "switch",
        "z": "5fb85cb408e14e98",
        "name": "Return code",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 240,
        "wires": [
            [],
            [
                "2a2d75855a9854fd"
            ]
        ]
    },
    {
        "id": "5898d10fe435d997",
        "type": "exec",
        "z": "5fb85cb408e14e98",
        "command": "sudo rm ",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "File delete",
        "x": 1130,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "8d32054fd43e10d8"
            ]
        ]
    },
    {
        "id": "2a2d75855a9854fd",
        "type": "change",
        "z": "5fb85cb408e14e98",
        "name": "Get filename",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 140,
        "wires": [
            [
                "5898d10fe435d997"
            ]
        ]
    },
    {
        "id": "8d32054fd43e10d8",
        "type": "switch",
        "z": "5fb85cb408e14e98",
        "name": "Return code",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1350,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f056d87d4a1a97ba",
        "type": "delay",
        "z": "5fb85cb408e14e98",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 640,
        "y": 340,
        "wires": [
            [
                "70c1e7767a7135b9"
            ]
        ]
    },
    {
        "id": "49cbed407b3a0263",
        "type": "comment",
        "z": "5fb85cb408e14e98",
        "name": "log_upload.sh",
        "info": "ftp -inv 192.168.1.x << EOF\n    user <username> <password>\n    binary\n    cd backup/logs\n    lcd /home/pi/datalog\n    put $1\nEOF",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "64f0406e23e5d569",
        "type": "comment",
        "z": "5fb85cb408e14e98",
        "name": "Auto Logger",
        "info": "",
        "x": 130,
        "y": 420,
        "wires": []
    },
    {
        "id": "c7e2419b4764a0b0",
        "type": "function",
        "z": "5fb85cb408e14e98",
        "name": "Set data",
        "func": "var now = new Date();\n\nDevAddr = \"AAABBB14A\";\n\nvar string = \"{firstName:'AAABBB14A', lastName:'last1'}\";\neval('var obj='+string);\n\nmsg.payload = {\n    \"timestamp\" : now.toLocaleString(),\n    \"DevAddr\" : obj.firstName,\n    \"temperature\" : 22,\n    \"humidity\" : 14,\n    \"pressure\" : 900\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 500,
        "wires": [
            [
                "2427259b7850ae03",
                "d6f009442c1fe5a0"
            ]
        ]
    },
    {
        "id": "2427259b7850ae03",
        "type": "function",
        "z": "5fb85cb408e14e98",
        "name": "Filename generator",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"maplin_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/pi/datalog/\"+ msg.fname;\n\n// We save the current payload into a different place on the msg object\nmsg.filecontent = msg.payload;\n\n// We are passing the file name search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"pattern\":msg.fname};\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.fname});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "2c5d71a2c05ed971",
                "18d98851a2c94ceb"
            ]
        ]
    },
    {
        "id": "2c5d71a2c05ed971",
        "type": "fs-file-lister",
        "z": "5fb85cb408e14e98",
        "name": "",
        "start": "d:/temp/datalog",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 380,
        "y": 600,
        "wires": [
            [
                "7138db4473891fe2"
            ]
        ]
    },
    {
        "id": "d6f009442c1fe5a0",
        "type": "debug",
        "z": "5fb85cb408e14e98",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 500,
        "wires": []
    },
    {
        "id": "7138db4473891fe2",
        "type": "switch",
        "z": "5fb85cb408e14e98",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 600,
        "wires": [
            [
                "48b397eb0ebb2780"
            ],
            [
                "1617228f3a1797f7"
            ]
        ]
    },
    {
        "id": "975adf797dc9d66f",
        "type": "csv",
        "z": "5fb85cb408e14e98",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,DevAddr,temperature,humidity,pressure",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 870,
        "y": 580,
        "wires": [
            [
                "dcdfe22c36a34112"
            ]
        ]
    },
    {
        "id": "dcdfe22c36a34112",
        "type": "file",
        "z": "5fb85cb408e14e98",
        "name": "",
        "filename": "d:/temp/log1.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1050,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "53ea3a81d9d7e8e7",
        "type": "csv",
        "z": "5fb85cb408e14e98",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,temperature,humidity",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 870,
        "y": 620,
        "wires": [
            [
                "dcdfe22c36a34112"
            ]
        ]
    },
    {
        "id": "48b397eb0ebb2780",
        "type": "change",
        "z": "5fb85cb408e14e98",
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 580,
        "wires": [
            [
                "975adf797dc9d66f"
            ]
        ]
    },
    {
        "id": "1617228f3a1797f7",
        "type": "change",
        "z": "5fb85cb408e14e98",
        "d": true,
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 620,
        "wires": [
            [
                "53ea3a81d9d7e8e7"
            ]
        ]
    },
    {
        "id": "64a0c9eba97c8787",
        "type": "inject",
        "z": "5fb85cb408e14e98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 500,
        "wires": [
            [
                "c7e2419b4764a0b0"
            ]
        ]
    },
    {
        "id": "18d98851a2c94ceb",
        "type": "debug",
        "z": "5fb85cb408e14e98",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "filecontent",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 540,
        "wires": []
    },
    {
        "id": "42d4f5d897620847",
        "type": "inject",
        "z": "5fb85cb408e14e98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 720,
        "wires": [
            [
                "ff15dcb467e00953"
            ]
        ]
    },
    {
        "id": "ff15dcb467e00953",
        "type": "function",
        "z": "5fb85cb408e14e98",
        "name": "Set data",
        "func": "var now = new Date();\n\nDevAddr = \"AAABBB14A\";\n\nvar string = \"{firstName:'AAABBB14A', lastName:'last1'}\";\neval('var obj='+string);\n\nmsg.payload = {\n    \"timestamp\" : now.toLocaleString(),\n    \"DevAddr\" : obj.firstName,\n    \"temperature\" : 22,\n    \"humidity\" : 14,\n    \"pressure\" : 900\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "446d3a784c0748eb",
                "2a6b08f421e32bd2"
            ]
        ]
    },
    {
        "id": "446d3a784c0748eb",
        "type": "debug",
        "z": "5fb85cb408e14e98",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 720,
        "wires": []
    },
    {
        "id": "2a6b08f421e32bd2",
        "type": "csv",
        "z": "5fb85cb408e14e98",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,DevAddr,temperature,humidity,pressure",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 170,
        "y": 820,
        "wires": [
            [
                "b383a77a4256dc68"
            ]
        ]
    },
    {
        "id": "b383a77a4256dc68",
        "type": "file",
        "z": "5fb85cb408e14e98",
        "name": "",
        "filename": "d:/temp/log2.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 350,
        "y": 820,
        "wires": [
            []
        ]
    }
]