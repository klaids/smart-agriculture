[
    {
        "id": "fb93e1410c3b219d",
        "type": "tab",
        "label": "Smart Agricolture",
        "disabled": false,
        "info": "This flow read a a payload in HEX, convert it\nin Base64, and put on output the message in ASCII"
    },
    {
        "id": "2289a92f4dc58bfa",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "d": true,
        "name": "Extract Packet",
        "func": "devid=\"12345678901 \"\n\n// the lora lora-packet-converter package expect device id (12) as a string before the Lora wan Packet\nmvk=msg.payload // from the injection \n\n//node.warn(mvk)\n\nmsg.payload=mvk\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 660,
        "wires": [
            [
                "1db216d42dce6831",
                "9f07b150113fab8b"
            ]
        ]
    },
    {
        "id": "1ebbeda11cd37c7d",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "name": "Sensor data hex/string decode",
        "func": "\nbytes=msg.payload.out // sensor/LoraWAN data payload\nnode.warn(bytes)\n\nnewbytes=Buffer.from(bytes, 'hex')\n//node.warn(newbytes.toString()) ///yeah\n\n//decode ...payload\n//https://learn.adafruit.com/using-lorawan-and-the-things-network-with-circuitpython?view=all\n\nmsg.payload.out = newbytes.toString();\n//node.warn(newbytes.toString())\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 800,
        "wires": [
            [
                "471a181a0f81cf74",
                "f4053f62fd89a3a6",
                "fb1a8406ff8dcbbb"
            ]
        ],
        "info": "This node decode the payload\nfrom HEX to String"
    },
    {
        "id": "1db216d42dce6831",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "d": true,
        "name": "InComing LoraWAN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 660,
        "wires": []
    },
    {
        "id": "9f07b150113fab8b",
        "type": "lorawan-packet-decrypt-nwkey-appkey",
        "z": "fb93e1410c3b219d",
        "name": "Decrypt LoRaWAN",
        "nsw": "238792b74801de223b50ddd309b8f139",
        "asw": "744826b8703e23a2e6cb8d79eed484bb",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "1ebbeda11cd37c7d",
                "268d7649d7a9ba8b",
                "ee62b13133183903"
            ]
        ]
    },
    {
        "id": "90746576c4ee047f",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "name": "HEX to base64",
        "func": "\nmvk=msg.payload // from the injection \n//node.warn(mvk)\nvar base64String = Buffer.from(mvk, 'hex').toString('base64')\n//node.warn(base64String)\nmsg.payload=base64String\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 620,
        "wires": [
            [
                "2289a92f4dc58bfa",
                "68ba56bfb745c746",
                "9f07b150113fab8b"
            ]
        ],
        "info": "This node will convert the message\non base64 format\n\nInput: HEX message\nOutput: Base64 message"
    },
    {
        "id": "68ba56bfb745c746",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "Base64 Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 620,
        "wires": []
    },
    {
        "id": "7b76cc623fae5692",
        "type": "ui_text",
        "z": "fb93e1410c3b219d",
        "d": true,
        "group": "403267448a6f0a1d",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Encrypted Message",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 380,
        "y": 440,
        "wires": []
    },
    {
        "id": "268d7649d7a9ba8b",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "Decrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 110,
        "y": 840,
        "wires": []
    },
    {
        "id": "471a181a0f81cf74",
        "type": "ui_text",
        "z": "fb93e1410c3b219d",
        "group": "403267448a6f0a1d",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Original Message",
        "format": "{{msg.payload.out}}",
        "layout": "col-center",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "b7052d055c177e42",
        "type": "ui_text",
        "z": "fb93e1410c3b219d",
        "group": "403267448a6f0a1d",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DevAddr",
        "format": "{{msg.payload.DevAddr}}",
        "layout": "col-center",
        "x": 280,
        "y": 920,
        "wires": []
    },
    {
        "id": "e3eef7abf05e9f2e",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "HEX Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "ee62b13133183903",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "name": "Extract DevAddr",
        "func": "\nlet HexString = \"\";\n\n// DevAddr to convert\nDevAddr=msg.payload.buffers.DevAddr // sensor/LoraWAN data payload\n//node.warn(DevAddr)\n\nfor (let i = 0; i < DevAddr.length; i++)\n{\n  hex = DevAddr[i].toString(16).toUpperCase();\n  HexString += hex;\n}\n//node.warn(HexString);\n\n// converted DevAddr\nmsg.payload.DevAddr = HexString;\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 940,
        "wires": [
            [
                "b7052d055c177e42",
                "75d9fa640a523918",
                "454e8db2d7755feb"
            ]
        ]
    },
    {
        "id": "75d9fa640a523918",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "DevAddr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.DevAddr",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 960,
        "wires": []
    },
    {
        "id": "c48adfb0f5ac4e66",
        "type": "ui_date_picker",
        "z": "fb93e1410c3b219d",
        "name": "",
        "label": "date",
        "group": "403267448a6f0a1d",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 70,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "b28bb243a7054115",
        "type": "inject",
        "z": "fb93e1410c3b219d",
        "name": "Message Reception",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a6ff29bc676359ba"
            ]
        ]
    },
    {
        "id": "a6ff29bc676359ba",
        "type": "exec",
        "z": "fb93e1410c3b219d",
        "command": "python3 /home/pi/Desktop/git/smart-agricolture/Project/pHAT/lorapi_rcx.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LoraPi Receive Script",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "3b0b181747f82523",
                "90746576c4ee047f",
                "e3eef7abf05e9f2e",
                "7b76cc623fae5692"
            ],
            [],
            []
        ]
    },
    {
        "id": "3b0b181747f82523",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "d": true,
        "name": "Message received",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "a0e0f067cee91082",
        "type": "ui_button",
        "z": "fb93e1410c3b219d",
        "name": "",
        "group": "403267448a6f0a1d",
        "order": 5,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Check New Message",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "Message",
        "topicType": "msg",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "a6ff29bc676359ba"
            ]
        ]
    },
    {
        "id": "b82fdfcce2d26c37",
        "type": "ui_button",
        "z": "fb93e1410c3b219d",
        "d": true,
        "name": "Stop Searching New Message",
        "group": "403267448a6f0a1d",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Stop Searching New Message",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "ed279fc489f2488c"
            ]
        ]
    },
    {
        "id": "ed279fc489f2488c",
        "type": "exec",
        "z": "fb93e1410c3b219d",
        "command": "pkill -f lorapi_rcx.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "a6ff29bc676359ba"
            ],
            [],
            [
                "a6ff29bc676359ba"
            ]
        ]
    },
    {
        "id": "0b6443221f135493",
        "type": "comment",
        "z": "fb93e1410c3b219d",
        "name": "Conversion + Extract Packet",
        "info": "",
        "x": 160,
        "y": 580,
        "wires": []
    },
    {
        "id": "a96c6cba892b34a0",
        "type": "comment",
        "z": "fb93e1410c3b219d",
        "name": "Decrypt + Sensor Data",
        "info": "",
        "x": 140,
        "y": 760,
        "wires": []
    },
    {
        "id": "2f46e4db4620c786",
        "type": "comment",
        "z": "fb93e1410c3b219d",
        "name": "Pi Script",
        "info": "",
        "x": 100,
        "y": 320,
        "wires": []
    },
    {
        "id": "68b4a64b34ed81da",
        "type": "comment",
        "z": "fb93e1410c3b219d",
        "name": "Input",
        "info": "",
        "x": 90,
        "y": 80,
        "wires": []
    },
    {
        "id": "f4053f62fd89a3a6",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "name": "Extract Information",
        "func": "\ndataArray = []\ndictArray = {}\n\nDevAddr = msg.payload.DevAddr\ntext = msg.payload.out\n//node.warn(text)\n\ntextArray = text.split(\" - \")\ntextArray = textArray.filter(item => item != \"\")\n//node.warn(textArray)\n\nfor(let i = 0; i < textArray.length; i++)\n{\n    dataArray = textArray[i].split(\":\")\n    dictArray[dataArray[0]] = parseInt(dataArray[1])\n}\n\n//node.warn(dictArray)\n\nmsg.payload.out = dictArray\n\n//node.warn(msg.payload.out.Hum)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "37ce3c9eeb238fb2",
                "3a9e55e2194dab4a",
                "85d4bcef36c53e4b",
                "4801d156b7bb9ada",
                "e9c62e55ecd36681"
            ]
        ],
        "info": "From the string in Input,\nthis node will convert it on a dict\nwith this format: \n{unit_measure : value}"
    },
    {
        "id": "454e8db2d7755feb",
        "type": "function",
        "z": "fb93e1410c3b219d",
        "d": true,
        "name": "Int - Ext",
        "func": "\n// converted DevAddr\n//DevAddr=msg.payload.DevAddr // sensor/LoraWAN data payload\n//node.warn(DevAddr)\n\nInfos = msg.payload.out\n//node.warn(\"stampa infos\")\nnode.warn(Infos)\n\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fb1a8406ff8dcbbb",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "Sensor Data Decoded",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 820,
        "wires": []
    },
    {
        "id": "37ce3c9eeb238fb2",
        "type": "debug",
        "z": "fb93e1410c3b219d",
        "name": "Informations from Sensors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 800,
        "wires": []
    },
    {
        "id": "3a9e55e2194dab4a",
        "type": "ui_gauge",
        "z": "fb93e1410c3b219d",
        "name": "Temp",
        "group": "403267448a6f0a1d",
        "order": 12,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temp",
        "label": "°C",
        "format": "{{msg.payload.out.Temp}}",
        "min": "-40",
        "max": "+85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 840,
        "wires": []
    },
    {
        "id": "85d4bcef36c53e4b",
        "type": "ui_gauge",
        "z": "fb93e1410c3b219d",
        "name": "Hum",
        "group": "403267448a6f0a1d",
        "order": 13,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Hum",
        "label": "Percent",
        "format": "{{msg.payload.out.Hum}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 880,
        "wires": []
    },
    {
        "id": "4801d156b7bb9ada",
        "type": "ui_gauge",
        "z": "fb93e1410c3b219d",
        "name": "Pressure",
        "group": "403267448a6f0a1d",
        "order": 14,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Pressure",
        "label": "hPa",
        "format": "{{msg.payload.out.Pres}}",
        "min": "300",
        "max": "1100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1000,
        "y": 920,
        "wires": []
    },
    {
        "id": "e9c62e55ecd36681",
        "type": "ui_gauge",
        "z": "fb93e1410c3b219d",
        "name": "UV",
        "group": "403267448a6f0a1d",
        "order": 15,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "UV",
        "label": "nm",
        "format": "{{msg.payload.out.UV}}",
        "min": "320",
        "max": "410",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 960,
        "wires": []
    },
    {
        "id": "1177a3ae3fa5d655",
        "type": "ui_spacer",
        "z": "fb93e1410c3b219d",
        "name": "spacer",
        "group": "403267448a6f0a1d",
        "order": 1,
        "width": 4,
        "height": 1
    },
    {
        "id": "5c543e3e319a5f47",
        "type": "ui_spacer",
        "z": "fb93e1410c3b219d",
        "name": "spacer",
        "group": "403267448a6f0a1d",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "b7f94b63bb580716",
        "type": "ui_spacer",
        "z": "fb93e1410c3b219d",
        "name": "spacer",
        "group": "403267448a6f0a1d",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "87a5598a52b03753",
        "type": "ui_spacer",
        "z": "fb93e1410c3b219d",
        "name": "spacer",
        "group": "403267448a6f0a1d",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "36d287626473ec84",
        "type": "ui_spacer",
        "z": "fb93e1410c3b219d",
        "name": "spacer",
        "group": "403267448a6f0a1d",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "403267448a6f0a1d",
        "type": "ui_group",
        "name": "Message",
        "tab": "87a869ccbb64bd1b",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "87a869ccbb64bd1b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]