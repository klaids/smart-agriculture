[
    {
        "id": "023c200f0134153b",
        "type": "tab",
        "label": "SA (offline)",
        "disabled": false,
        "info": "This flow read a a payload in HEX, convert it\nin Base64, and put on output the message in ASCII\n\nThis is the OFFLINE version, to test it without a Pi"
    },
    {
        "id": "2c35c1b8e920d6ea",
        "type": "function",
        "z": "023c200f0134153b",
        "d": true,
        "name": "Extract Packet",
        "func": "devid=\"12345678901 \"\n\n// the lora lora-packet-converter package expect device id (12) as a string before the Lora wan Packet\nmvk=msg.payload // from the injection \n//node.warn(mvk)\nmsg.payload=mvk\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 320,
        "wires": [
            [
                "0ee98ab7d8cdac54",
                "e10315f711f9fea0"
            ]
        ]
    },
    {
        "id": "de39933686d0f589",
        "type": "function",
        "z": "023c200f0134153b",
        "name": "Sensor data to hex/decode",
        "func": "\nbytes=msg.payload.out // sensor/LoraWAN data playload\n\nnewbytes=Buffer.from(bytes, 'hex')\n//node.warn(newbytes.toString()) ///yeah\n\n//decode ...payload\n//https://learn.adafruit.com/using-lorawan-and-the-things-network-with-circuitpython?view=all\n\nmsg.payload.out = newbytes.toString();\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "9f1aeb79862148c0",
                "7f91a7aafe0ec3b9",
                "2ee5a4ee8b870591"
            ]
        ]
    },
    {
        "id": "9f1aeb79862148c0",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Sensor Data Decoded",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 400,
        "wires": []
    },
    {
        "id": "0ee98ab7d8cdac54",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "InComing LoraWAN",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "e10315f711f9fea0",
        "type": "lorawan-packet-decrypt-nwkey-appkey",
        "z": "023c200f0134153b",
        "name": "Decrypt LoRaWAN",
        "nsw": "238792b74801de223b50ddd309b8f139",
        "asw": "744826b8703e23a2e6cb8d79eed484bb",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "de39933686d0f589",
                "d317ac29b6e8492c",
                "7424a55315036c98"
            ]
        ]
    },
    {
        "id": "7b79c69d8d117bb9",
        "type": "inject",
        "z": "023c200f0134153b",
        "d": true,
        "name": "Encrypted Message (bytes)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Encrypted Message",
        "payload": "b'40c76ac6aa00060001c738a8cbfb5fc6f2435609707cc314ec8a96edae30c18f4a9062baeb85e45790'",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "6295e9e864ec8f6a",
                "6ea25e42fb44a20b",
                "c79d8fc6d4f63a0d"
            ]
        ]
    },
    {
        "id": "c79d8fc6d4f63a0d",
        "type": "function",
        "z": "023c200f0134153b",
        "name": "HEX to base64",
        "func": "\nmvk=msg.payload // from the injection\n//node.warn(mvk)\nvar base64String = Buffer.from(mvk, 'hex').toString('base64')\n//node.warn(base64String)\nmsg.payload=base64String\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 260,
        "wires": [
            [
                "2c35c1b8e920d6ea",
                "ec8661fb881727be",
                "e10315f711f9fea0"
            ]
        ]
    },
    {
        "id": "ec8661fb881727be",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Base64 Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 260,
        "wires": []
    },
    {
        "id": "6ea25e42fb44a20b",
        "type": "ui_text",
        "z": "023c200f0134153b",
        "group": "accf8feaa433af25",
        "order": 4,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Encrypted Message",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "d317ac29b6e8492c",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Decrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 460,
        "wires": []
    },
    {
        "id": "7f91a7aafe0ec3b9",
        "type": "ui_text",
        "z": "023c200f0134153b",
        "group": "accf8feaa433af25",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Original Message",
        "format": "{{msg.payload.out}}",
        "layout": "col-center",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "a4fd6628c6e4dbd1",
        "type": "ui_text",
        "z": "023c200f0134153b",
        "group": "accf8feaa433af25",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DevAddr",
        "format": "{{msg.payload.DevAddr}}",
        "layout": "col-center",
        "x": 380,
        "y": 560,
        "wires": []
    },
    {
        "id": "6295e9e864ec8f6a",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "HEX Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "7424a55315036c98",
        "type": "function",
        "z": "023c200f0134153b",
        "name": "Extract DevAddr",
        "func": "\nlet HexString = \"\";\n\nDevAddr=msg.payload.buffers.DevAddr // sensor/LoraWAN data payload\n\n//node.warn(DevAddr)\n\nfor (let i = 0; i < DevAddr.length; i++)\n{\n  hex = DevAddr[i].toString(16).toUpperCase();\n  HexString += hex;\n}\n//node.warn(HexString);\n\nmsg.payload.DevAddr = HexString;\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 560,
        "wires": [
            [
                "a4fd6628c6e4dbd1",
                "06d95dfaeae45c37"
            ]
        ]
    },
    {
        "id": "06d95dfaeae45c37",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "DevAddr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.DevAddr",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 600,
        "wires": []
    },
    {
        "id": "3ee4add78fbaee35",
        "type": "ui_date_picker",
        "z": "023c200f0134153b",
        "name": "",
        "label": "date",
        "group": "accf8feaa433af25",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 70,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "0b488b8c91f3c889",
        "type": "ui_button",
        "z": "023c200f0134153b",
        "name": "Start Reading (From Dashboard)",
        "group": "accf8feaa433af25",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Reading",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "40c76ac6aa00060001c738a8cbfb5fc6f2435609707cc314ec8a96edae30c18f4a9062baeb85e45790",
        "payloadType": "str",
        "topic": "message",
        "topicType": "str",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "6ea25e42fb44a20b",
                "c79d8fc6d4f63a0d",
                "6295e9e864ec8f6a"
            ]
        ]
    },
    {
        "id": "8f0ec9fa6bedaa7d",
        "type": "inject",
        "z": "023c200f0134153b",
        "name": "Encrypted Message (str)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Encrypted Message",
        "payload": "40C54AC4AA00020001228F96D52CAD4C222382CB6FF2BC7CF3F8583BB6764F8514AC5CFD8F312849F8FEDD4B3F5D1A",
        "payloadType": "str",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "6ea25e42fb44a20b",
                "c79d8fc6d4f63a0d",
                "6295e9e864ec8f6a"
            ]
        ]
    },
    {
        "id": "fa439bd4853485a9",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Informations from Sensors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 440,
        "wires": []
    },
    {
        "id": "ebe318f6ceceb161",
        "type": "ui_gauge",
        "z": "023c200f0134153b",
        "name": "Temp",
        "group": "403267448a6f0a1d",
        "order": 12,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temp",
        "label": "°C",
        "format": "{{msg.payload.out.T}}",
        "min": "-40",
        "max": "+85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "03f6d49f4e599310",
        "type": "ui_gauge",
        "z": "023c200f0134153b",
        "name": "Hum",
        "group": "403267448a6f0a1d",
        "order": 13,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Hum",
        "label": "Percent",
        "format": "{{msg.payload.out.H}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "3bf2fa2a8e0ea286",
        "type": "ui_gauge",
        "z": "023c200f0134153b",
        "name": "Pressure",
        "group": "403267448a6f0a1d",
        "order": 14,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Pressure",
        "label": "hPa",
        "format": "{{msg.payload.out.P}}",
        "min": "300",
        "max": "1100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1000,
        "y": 560,
        "wires": []
    },
    {
        "id": "bbdfa095a41d31f6",
        "type": "ui_gauge",
        "z": "023c200f0134153b",
        "name": "UV",
        "group": "403267448a6f0a1d",
        "order": 15,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "UV",
        "label": "nm",
        "format": "{{msg.payload.out.U}}",
        "min": "320",
        "max": "410",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 990,
        "y": 640,
        "wires": []
    },
    {
        "id": "2ee5a4ee8b870591",
        "type": "function",
        "z": "023c200f0134153b",
        "name": "Extract Information",
        "func": "\ndataArray = []\ndictArray = {}\n\nDevAddr = msg.payload.DevAddr\ntext = msg.payload.out\n//node.warn(text)\n\ntextArray = text.split(\"$\")\ntextArray = textArray.filter(item => item != \"\")\n//node.warn(textArray)\n\nfor(let i = 0; i < textArray.length; i++)\n{\n    dataArray = textArray[i].split(\":\")\n    dictArray[dataArray[0]] = parseFloat(dataArray[1])\n}\n\n//node.warn(dictArray)\n\nmsg.payload.out = dictArray\n\n//node.warn(msg.payload.out.Hum)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "fa439bd4853485a9",
                "ebe318f6ceceb161",
                "03f6d49f4e599310",
                "3bf2fa2a8e0ea286",
                "bbdfa095a41d31f6",
                "c960d41cb2f70c2f",
                "cb72cd73f88c3e04",
                "27eddc652d118e18",
                "c02fe977fbf96b3a",
                "63a13d0c59bf6519",
                "acea7de58a674b2c"
            ]
        ],
        "info": "From the string in Input,\nthis node will convert it on a dict\nwith this format: \n{unit_measure : value}"
    },
    {
        "id": "c960d41cb2f70c2f",
        "type": "ui_gauge",
        "z": "023c200f0134153b",
        "name": "Humidity Soil",
        "group": "403267448a6f0a1d",
        "order": 15,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity Soil",
        "label": "nm",
        "format": "{{msg.payload.out.S}}",
        "min": "320",
        "max": "410",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1010,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb72cd73f88c3e04",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Temp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out.T",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 480,
        "wires": []
    },
    {
        "id": "acea7de58a674b2c",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Hum",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out.H",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 520,
        "wires": []
    },
    {
        "id": "63a13d0c59bf6519",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Pressure",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out.P",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "c02fe977fbf96b3a",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "Humidity Soil",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out.S",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 600,
        "wires": []
    },
    {
        "id": "27eddc652d118e18",
        "type": "debug",
        "z": "023c200f0134153b",
        "name": "UV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.out.U",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "accf8feaa433af25",
        "type": "ui_group",
        "name": "Default",
        "tab": "87a869ccbb64bd1b",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "403267448a6f0a1d",
        "type": "ui_group",
        "name": "Message",
        "tab": "87a869ccbb64bd1b",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "87a869ccbb64bd1b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]